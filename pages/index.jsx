import { useEffect, useState } from "react";

// Libs
import axios from "axios";
import Head from "next/head";
import confetti from "canvas-confetti";
import { useSelector, useDispatch } from "react-redux";
import { Loading, Spacer, Grid, Collapse, Button } from "@nextui-org/react";

// Components
import Layout from "./components/Layout/Layout";
import CardAdd from "./components/CardAdd/CardAdd";
import CardPage from "./components/CardPage/CardPage";
import ModalInfo from "./components/ModalInfo/ModalInfo";
import EditCategory from "./components/Form/Category/EditCategory/EditCategory";
import CreateCategory from "./components/Form/Category/CreateCategory/CreateCategory";
import DeleteCategory from "./components/Form/Category/DeleteCategory/DeleteCategory";

// Redux
import { dataInitial } from "../redux/pagesSlice";

// Style
import styles from "./Home.module.css";

export default function Home({ info }) {
  const dispatch = useDispatch();
  const [deleteCategory, setDeleteCategory] = useState(false);
  const [editCategory, setEditCategory] = useState(false);
  const [valueCategory, setValueCategory] = useState({});
  const [createCategory, setCreateCategory] = useState(false);
  const { data } = useSelector((state) => state.data);

  useEffect(() => {
    if (info === null) {
      setTimeout(() => {
        axios
          .get(`${process.env.NEXT_PUBLIC_API_URL}/categories?populate=*`)
          .then((res) => {
            dispatch(dataInitial(res?.data?.data));
          })
          .catch((e) => {
            console.log(e);
          });
      }, 2000);
    } else {
      dispatch(dataInitial(info));
    }
  }, []);

  const handleEdit = (value) => {
    setEditCategory(true);
    setValueCategory(value);
  };

  const handleConfetti = () => {
    setCreateCategory(true);
    var defaults = {
      spread: 360,
      ticks: 50,
      gravity: 0,
      decay: 0.94,
      startVelocity: 30,
      shapes: ["star"],
      colors: ["FFE400", "FFBD00", "E89400", "FFCA6C", "FDFFB8"],
    };

    function shoot() {
      confetti({
        ...defaults,
        particleCount: 40,
        scalar: 1.2,
        shapes: ["star"],
      });

      confetti({
        ...defaults,
        particleCount: 10,
        scalar: 0.75,
        shapes: ["circle"],
      });
    }

    setTimeout(shoot, 0);
    setTimeout(shoot, 100);
    setTimeout(shoot, 200);
  };

  return (
    <>
      <Head>
        <title>Documentos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className={styles.content}>
          <div className={styles.containerCategory}>
            <Button color="success" onPress={handleConfetti}>
              Crear categoría
            </Button>
          </div>
          {data.length !== 0 ? (
            data.map(
              ({
                id: idCategory,
                attributes: { title: titleCategory },
                attributes: {
                  pages: { data: value },
                },
              }) => (
                <>
                  <div className={styles.title}>
                    <Grid.Container gap={2}>
                      <Grid>
                        <Collapse.Group
                          splitted
                          className={styles.collapseGroup}
                        >
                          <Collapse title={titleCategory}>
                            <Grid.Container gap={2}>
                              <Grid>
                                <Button
                                  bordered
                                  color="error"
                                  auto
                                  onPress={() => setDeleteCategory(true)}
                                  className={styles.hoverDelete}
                                >
                                  Eliminar
                                </Button>
                              </Grid>
                              <Grid>
                                <Button
                                  bordered
                                  color="success"
                                  auto
                                  onPress={() =>
                                    handleEdit({
                                      id: idCategory,
                                      title: titleCategory,
                                    })
                                  }
                                  className={styles.hoverEdit}
                                >
                                  Editar
                                </Button>
                              </Grid>
                            </Grid.Container>
                          </Collapse>
                        </Collapse.Group>
                      </Grid>
                    </Grid.Container>
                  </div>
                  <div className={styles.containerCard}>
                    {value?.length !== 0 &&
                      value.map(
                        ({
                          id: idPage,
                          attributes: { title, value, url, document },
                        }) => (
                          <CardPage
                            key={idPage}
                            idPage={idPage}
                            title={title}
                            value={value}
                            url={url}
                            document={document}
                            idCategory={idCategory}
                          />
                        )
                      )}
                    <CardAdd idCategory={idCategory} title={titleCategory} />
                  </div>
                  <ModalInfo
                    visible={deleteCategory}
                    setVisible={setDeleteCategory}
                    title={`¿Desea eliminar la categoría ${titleCategory}?`}
                  >
                    <DeleteCategory
                      idCategory={idCategory}
                      setVisible={setDeleteCategory}
                    />
                  </ModalInfo>
                  <ModalInfo
                    visible={editCategory}
                    setVisible={setEditCategory}
                    title={`Editar la categoría ${valueCategory?.title}`}
                  >
                    <EditCategory
                      valueCategory={valueCategory}
                      setVisible={setEditCategory}
                    />
                  </ModalInfo>
                  <ModalInfo
                    visible={createCategory}
                    setVisible={setCreateCategory}
                    title={"Crear una categoría"}
                  >
                    <CreateCategory setVisible={setCreateCategory} />
                  </ModalInfo>
                </>
              )
            )
          ) : (
            <div className={styles.containerLoad}>
              <Spacer />
              <Loading size="xl" />
              <Spacer />
            </div>
          )}
        </div>
      </Layout>
    </>
  );
}

export async function getServerSideProps() {
  const res = await fetch(
    `${process.env.NEXT_PUBLIC_API_URL}/categories?populate=*`
  );
  const { data: info } = await res.json();

  return {
    props: { info },
  };
}
